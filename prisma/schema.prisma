// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  role      String    @default("user") // admin, user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Client model
model Client {
  id              String    @id @default(uuid())
  name            String
  email           String?
  phone           String?
  address         String?
  kraPin          String?
  industry        String?
  contactPerson   String?
  contactPosition String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  invoices        Invoice[]
  projects        Project[]
  documents       Document[] // Relation to documents
}

// Subcontractor model
model Subcontractor {
  id            String    @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  kraPin        String?
  specialty     String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[] @relation("ProjectSubcontractors")
  documents     Document[] // Relation to documents
}

// Project model
model Project {
  id              String          @id @default(uuid())
  title           String
  description     String?
  startDate       DateTime?
  endDate         DateTime?
  status          String          // active, completed, cancelled, on-hold
  clientId        String
  client          Client          @relation(fields: [clientId], references: [id])
  subcontractors  Subcontractor[] @relation("ProjectSubcontractors")
  totalValue      Float?
  invoices        Invoice[]
  documents       Document[]      // Relation to documents
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Invoice model
model Invoice {
  id              String    @id @default(uuid())
  invoiceNumber   String    @unique
  description     String?
  issueDate       DateTime
  dueDate         DateTime
  clientId        String
  client          Client    @relation(fields: [clientId], references: [id])
  projectId       String?
  project         Project?  @relation(fields: [projectId], references: [id])
  lpoReference    String?
  items           InvoiceItem[]
  subtotal        Float
  taxAmount       Float
  totalAmount     Float
  status          String    // draft, sent, paid, partial, overdue, cancelled
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  payments        Payment[]
  documents       Document[] // Relation to documents
}

// Invoice item model
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  taxRate     Float    @default(0)
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Payment model
model Payment {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  amount      Float
  paymentDate DateTime
  method      String   // bank transfer, cash, cheque, mpesa
  reference   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Service model
model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  price       Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Document model
model Document {
  id               String    @id @default(uuid())
  title            String
  description      String?
  fileName         String
  fileUrl          String
  fileType         String    // pdf, docx, xlsx, png, etc.
  fileSize         Int       // in bytes
  category         String    // contract, invoice, certificate, report, etc.
  clientId         String?
  client           Client?   @relation(fields: [clientId], references: [id])
  projectId        String?
  project          Project?  @relation(fields: [projectId], references: [id])
  invoiceId        String?
  invoice          Invoice?  @relation(fields: [invoiceId], references: [id])
  subcontractorId  String?
  subcontractor    Subcontractor? @relation(fields: [subcontractorId], references: [id])
  expirationDate   DateTime? // For documents that expire (certificates, licenses)
  tags             String?   // Comma-separated tags for searching
  uploadedById     String    // User who uploaded the document 
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}
